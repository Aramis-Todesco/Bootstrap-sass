{"mappings":"AAIA;;;;AAGA;;;;AA4BI;EADJ;;;;;AAkBA;;;;;;AAXI;EAWJ;;;;;;;AANI;EAMJ","sources":["src/moduli/modulo1.scss"],"sourcesContent":["//sia il modulo x e il modulo y hanno al loro interno la variabile $bg\r\n@use \"x\";// namespace x\r\n@use \"y\";//namespace y\r\n\r\nbody {\r\n    background-color: x.$bg; //namespace.variabile\r\n}\r\nh2 {\r\n    background-color: y.$bg;\r\n}\r\n//il namespace di default è il nome del file. Per cambiare il namespace di default con la keyword as\r\n/*\r\n@use \"x\" as \"a\";\r\n@use \"y\" as \"b\";\r\nbody {\r\n    background-color: a.$bg;\r\n}\r\nh2 {\r\n    background-color: b.$bg;\r\n}\r\n*/\r\n//per rimuovere il namespace(meglio tenerlo) utilizziamo * - indicheremo quindi solo la variabile\r\n//@use \"x\" as *;\r\n\r\n//In Sass variabili, funzioni e mixin definite in un partial sono pubbliche\r\n//per rendere una variabile/funzione/mixin privata anteponiamo al nome - o _\r\n/*\r\nbody {\r\n    @include x.container;\r\n}\r\n*/ //errore, il mixin non è importabile perché privato\r\n\r\n//In Sass possiamo definire una MediaQuery all'interno di una regola, in CSS non possiamo\r\n//index2.b954f720.css\r\np {\r\n    @media(min-width: 600px) {\r\n        width: 80%;\r\n    }\r\n}\r\n\r\n@mixin medium-device {\r\n    @media (min-width: y.$medium-size-start) {\r\n        @content;\r\n    }\r\n}\r\n@mixin big-device {\r\n    @media (min-width: y.$big-size-start) {\r\n        @content;\r\n    }\r\n}\r\n//grazie a @content le dichiarazioni indicate in @include verranno aggiunte al mixin\r\n//il placeholder @content verrà sostituito con @include\r\n#test {\r\n    display: grid;\r\n    background-color: red;\r\n    color: white;\r\n\r\n    @include medium-device {\r\n        grid-template-columns: repeat(2, 1fr);\r\n        background-color: yellow;\r\n        color: black;\r\n    }\r\n\r\n    @include big-device {\r\n        grid-template-columns: repeat(3, 1fr);\r\n        background-color: magenta;\r\n    }\r\n} //index2.b954f720.css\r\n\r\n//con @import i file sono collegati != @use\r\n//quello che importiamo con @use rimane locale al file in cui effettuiamo l'importazione \r\n//Per avere lo stesso comportamento con @use utilizziamo @forward nei partials che si collegano al partial iniziale. @use lo utilizziamo nel file principale Sass (non è una buona pratica)"],"names":[],"version":3,"file":"index2.b954f720.css.map","sourceRoot":"/__parcel_source_root/"}