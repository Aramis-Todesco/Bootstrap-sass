//controllare index.b2d9cf43.css
$myFavouriteColor: blue;
$type: light;
$bg: #{$type}green;

:root {
    $dark: #222;
    --darktheme-bg: #{$dark};
    body {
        background-color: var(--darktheme-bg);
    }
} 
#h1 {
    background-color: $myFavouriteColor;

}
#p {
    background-color: $bg;
}

section {
    font: {
        size: 3rem;
        family: serif;
        weight: 700;
        variant: small-caps;
    }
    > h3 {
        background-color: yellow;
    }
    & :hover {
        background-color: lightsalmon;
    }
}

//funzioni
@function get-font-size($fattore) {
    @return $fattore * 3.2rem;
}
#div1 {
    font-size: get-font-size(2);
}

//automizziamo la creazione di regole CSS con le liste
$colori: green, blue magenta red;
@each $colore in $colori {
    .#{$colore} {
        color: $colore;
        border-color: $colore;
    }
} //index.b2d9cf43.css

$colonne-num: 2, 3, 4, 6, 12;
@each $colonne in $colonne-num {
    .col-#{$colonne} {
        $col-span: calc(12 / $colonne);
        grid-template-columns: repeat($col-span, 1fr);
    }
} //index.b2d9cf43.css

//mappe
$breakpoint: (
    "small": 600px,
    "medium": 1200px,
    "big": 1900px
);
@each $chiave, $valore in $breakpoint {
    @media (min-width: $valore) {
        .container-#{$chiave} {
            max-width: calc($valore - 100px);
        }
    }
} //index.b2d9cf43.css

//mixin
/*
#div2 {
    font-size: 1.5rem;
    padding: 1em;
    border: 2px solid magenta;
}
#p2 {
    font-size: 1.5rem;
    padding: 1em;
    border: 2px solid magenta;
}
OPPURE
.std {
    font-size: 1.5rem;
    padding: 1em;
    border: 2px solid magenta;
}
*/

@mixin block-std-2 {
    background-color: white;
}
//Se all'interno abbiamo valori diversi 
@mixin block-std($fz, $padding, $border-color, $fw) {
    font-size: $fz;
    padding: $padding;
    border: 4px solid $border-color;  
    font-weight: $fw;
}
#div2 {
    @include block-std-2;
    @include block-std(1.2rem, 1em, magenta, 400);
}
#p2 {
    @include block-std-2;
    @include block-std(1rem, 0.8em, blue, 700);
}

//Extend, simile ai @mixin - differenze nel file CSS compilato index.b2d9cf43.css
.base {
    padding: 1em;
    border: 2px solid;
    margin-bottom: 2rem;
}
.special {
    @extend .base;
    font-weight: bold;
    color: yellow;
}
/*
@mixin base-style {
    padding: 1em;
    border: 2px solid;
    margin-bottom: 2rem;
}
.base {
    @include base-style;
}
.special {
    @include base-style
    font-weight: bold;
    color: yellow;
}
*/

//placeholder selector % -- estendiamo le dichiarazioni
%base-style {
    padding: 1em;
    border: 2px solid;
    margin-bottom: 2rem;
    display: inline-block;
}
.base2 {
    @extend %base-style;
}
.special2 {
    @extend %base-style;
    font-weight: bold;
    color: yellow;
}

//@if @else
@mixin base-style($fz, $bold: false) {
    font-size: $fz;
    @if $bold {
        font-weight: 700;
        color: aliceblue;
    } @else {
        font-weight: 400;
        color: red;
    }
    
}
#article1 {
    @include base-style(3rem, true);
    margin-bottom: 2rem;
    > div {
        @include base-style(2rem);
    }
}

//@each - creiamo un grid system
$gap-default: 1rem;
$column-span: 2, 3, 4, 6, 8, 12;
@mixin container($col: 12, $gap: $gap-default) {
    display: grid;
    grid-template-columns: repeat($col, 1fr);
    gap: $gap;
}
.container {
    font-size: 115%;
    @include container();
}
@each $span in $column-span {
    .col#{$span} {
        grid-column: span $span;
    }
}

//@for - invece di @each
@for $i from 1 to 5 {
    .colonna-#{$i} {
        width: calc(100% / $i);
    }
}//index.b2d9cf43.css
@for $index from 1 through 5 {
    .colonna2-#{$index} {
        width: calc(100% / $index);
    }
}//index.b2d9cf43.css
